// -----------------------------------------------------------------------------------------
// <copyright company="Microsoft Corporation" file="AdvancedSearch.cs">
// 	Copyright (c) Microsoft Corporation 2006
// </copyright>
// <project>
// 	MOMv3
// </project>
// <summary>
// 	AdvancedSearch helper utils
// </summary>
// <history>
// 	[visnara] 6/27/2006 Created
//  [visnara] 1/04/2007 Added support for Object Discoveries
// </history>
// -----------------------------------------------------------------------------------------

namespace Mom.Test.UI.Core.Console.AdvancedSearch
{
    #region using directives

    using System;
    using System.Collections.Generic;
    using System.Text;
    using Mom.Test.UI.Core.Console;
    using Mom.Test.UI.Core.Console.MomControls;
    using Maui.Core;
    using Maui.Core.Utilities;
    using Mom.Test.UI.Core.Common;
    using Maui.Core.WinControls;
    using Mom.Test.UI.Core.Console.Search.Dialogs;
    using Microsoft.EnterpriseManagement.Mom.Internal;
    ////using Mom.Test.UI.Core.Console.Search.Dialogs;

    #endregion

    #region enums

    /// <summary>
    /// Search Object type - enumeration
    /// </summary>
    /// <history>
    ///	[sunsingh] 18feb08 Created	
    /// </history>
    public enum SearchType
    {
        /// <summary>
        /// MonitorAlertPriority -- monitors generates alert for specific priority
        /// </summary>
        AlertPriority 
    }
    /// <summary>
    /// Search Object type - enumeration
    /// </summary>
    /// <history>
    ///		[visnara] 27JUN06 Created
    /// </history>
    public enum AdvancedSearchObjectType
    {
        /// <summary>
        /// Managed Objects -- search by name
        /// </summary>
        ManagedObjects,

        /// <summary>
        /// Alerts -- search by name
        /// </summary>
        Alerts,

        /// <summary>
        /// Events -- search for events generated by a specific computer
        /// </summary>
        Events,

        /// <summary>
        /// Rules -- search by name
        /// </summary>
        Rules,

        /// <summary>
        /// Tasks -- search by name
        /// </summary>
        Tasks,

        /// <summary>
        /// Views -- search by name
        /// </summary>
        Views,

        /// <summary>
        /// Object Discoveries -- search by name
        /// </summary>
        ObjectDiscoveries,

        /// <summary>
        /// Monitors -- search by name
        /// </summary>
        Monitors
    }
    /// <summary>
    /// Advanced Search result column - enumeration (currently only minimal # of cols supported for each view)
    /// </summary>
    /// <history>
    ///		[visnara] 27JUN06 Created
    /// </history>
    public enum AdvancedSearchResultColumn
    {
        /// <summary>
        /// Managed Object View Name column
        /// </summary>
        ManagedObjectsNameColumn,

        /// <summary>
        /// Alert View Path Column
        /// </summary>
        AlertsPathColumn,

        /// <summary>
        /// Alert View Source Column
        /// </summary>
        AlertsSourceColumn,

        /// <summary>
        /// Event View Event Number Column
        /// </summary>
        EventsEventNumberColumn,

        /// <summary>
        /// Rule View Name Column
        /// </summary>
        RulesNameColumn,

        /// <summary>
        /// Task View Task Column
        /// </summary>
        TasksNameColumn,

        /// <summary>
        /// Views View - Name Column
        /// </summary>
        ViewsNameColumn,

         /// <summary>
        /// Object Discoveries View - Name Column
        /// </summary>
        ObjectDiscoveriesNameColumn,

        /// <summary>
        ///  MonitorsNameColumn- Name Column
        /// </summary>
         MonitorsNameColumn
    }
    #endregion

    #region AdvancedSearchParameters Class

    /// -----------------------------------------------------------------------------
    /// <summary>
    /// Advanced Search parameters class
    /// </summary>
    /// <history>
    /// 	[visnara] 6/27/2006 Created
    /// </history>
    /// -----------------------------------------------------------------------------
    public class AdvancedSearchParameters
    {
        #region private members

        /// <summary>
        /// Advanced Search Object Type 
        /// </summary>
        private AdvancedSearchObjectType advancedSearchObjectType;

        /// <summary>
        /// Advanced Search Object Name 
        /// </summary>
        private string name = null;

        /// <summary>
        /// Save Search Parameters in My Favorites? 
        /// </summary>
        private bool save = false;

        /// <summary>
        /// Save Search Name 
        /// </summary>
        private string saveSearchName = null;

        #endregion private members

        #region constructor

        /// <summary>
        /// Default Constructor 
        /// </summary>
        public AdvancedSearchParameters()
        {
        }

        #endregion

        #region properties

        /// <summary>
        /// Advanced Search Object Type
        /// </summary>
        public AdvancedSearchObjectType SearchObjectType
        {
            get
            {
                return this.advancedSearchObjectType;
            }

            set
            {
                this.advancedSearchObjectType = value;
            }
        }

        /// <summary>
        /// Advanced Search Object Name
        /// </summary>
        public string Name
        {
            get
            {
                return this.name;
            }

            set
            {
                this.name = value;
            }
        }

        /// <summary>
        /// Save Search Parameters in My Favorites? 
        /// </summary>
        public bool Save
        {
            get
            {
                return this.save;
            }

            set
            {
                this.save = value;
            }
        }

        /// <summary>
        /// Save Search Name
        /// </summary>
        public string SaveSearchName
        {
            get
            {
                return this.saveSearchName;
            }

            set
            {
                this.saveSearchName = value;
            }
        }

        #endregion
    }

    #endregion

    /// -----------------------------------------------------------------------------
    /// <summary>
    /// Advanced Search helper class
    /// </summary>
    /// <history>
    /// 	[visnara] 6/27/2006 Created
    /// </history>
    /// -----------------------------------------------------------------------------
    public class AdvancedSearch
    {
        #region private members

        /// <summary>
        /// cache to hold a reference to AdvancedSearchDialog
        /// </summary>
        private AdvancedSearchDialog cachedAdvancedSearchDialog;

        /// <summary>
        /// cache to hold a reference to AdvancedSearchWildcardDialog
        /// </summary>
        private AdvancedSearchWildcardDialog cachedAdvancedSearchWildcardDialog;

        /// <summary>
        /// cache to hold a reference to SavedSearchNameDialog
        /// </summary>
        private Mom.Test.UI.Core.Console.Search.Dialogs.SavedSearchNameDialog cachedSavedSearchNameDialog;

        /// <summary>
        /// cache to Hold the Reference To the AlertType Priority selecting for MOM
        /// </summary>
        private AlertPriorityDialog cachedAlertPriorityDialog;
        
        /// <summary>
        /// reference to ConsoleApp
        /// </summary>
        private ConsoleApp consoleApp;

        /// <summary>
        /// timeout value for dialog UIs to become ready 
        /// </summary>
        private int timeout = 5000;

        /// <summary>
        /// search object type 
        /// </summary>
        private AdvancedSearchObjectType searchObjectType;
       #endregion

        #region constructor

        /// -----------------------------------------------------------------------------
        /// <summary>
        /// default constructor
        /// </summary>
        /// <history>
        /// 	[visnara] 27JUN06 Created
        /// </history>
        /// -----------------------------------------------------------------------------
        public AdvancedSearch()
        {
            /*this.searchObjectType = searchObjectType;*/
            this.consoleApp = CoreManager.MomConsole;
        }

        #endregion

        #region properties

        /// <summary>
        /// Advanced Search Dialog Window
        /// </summary>
        /// <history>
        ///		[visnara] 27JUN06 Created
        /// </history>
        public AdvancedSearchDialog AdvancedSearchDialogWindow
        {
            get
            {
                if (this.cachedAdvancedSearchDialog == null)
                {
                    this.cachedAdvancedSearchDialog = new AdvancedSearchDialog(CoreManager.MomConsole);

                    ////this.cachedAdvancedSearchDialog = new Mom.Test.UI.Core.Console.Search.Dialogs.AdvancedSearchDialog(CoreManager.MomConsole);
                    UISynchronization.WaitForUIObjectReady(this.cachedAdvancedSearchDialog, this.timeout);
                    this.cachedAdvancedSearchDialog.Extended.SetFocus();
                }

                return this.cachedAdvancedSearchDialog;
            }
        }

        /// <summary>
        /// Advanced Search wild card Dialog Window
        /// </summary>
        /// <history>
        ///		[visnara] 27JUN06 Created
        /// </history>
        public AdvancedSearchWildcardDialog AdvancedSearchWildcardDialogWindow
        {
            get
            {
                if (this.cachedAdvancedSearchWildcardDialog == null)
                {
                    this.cachedAdvancedSearchWildcardDialog = new AdvancedSearchWildcardDialog(CoreManager.MomConsole, this.searchObjectType);
                    UISynchronization.WaitForUIObjectReady(this.cachedAdvancedSearchWildcardDialog, this.timeout);
                    this.cachedAdvancedSearchWildcardDialog.Extended.SetFocus();
                }
                
                return this.cachedAdvancedSearchWildcardDialog;
            }
        }

        /// <summary>
        /// Saved Search Name Dialog
        /// </summary>
        /// <history>
        ///		[visnara] 27JUN06 Created
        /// </history>
        public Mom.Test.UI.Core.Console.Search.Dialogs.SavedSearchNameDialog SavedSearchNameDialogWindow
        {
            get
            {
                if (this.cachedSavedSearchNameDialog == null)
                {
                    this.cachedSavedSearchNameDialog = new Mom.Test.UI.Core.Console.Search.Dialogs.SavedSearchNameDialog(CoreManager.MomConsole);
                    UISynchronization.WaitForUIObjectReady(this.cachedSavedSearchNameDialog, this.timeout);
                    this.cachedSavedSearchNameDialog.Extended.SetFocus();
                }

                return this.cachedSavedSearchNameDialog;
            }
        }
        /// <summary>
        /// AlertPriorityDialog
        /// </summary>
        /// <history>
        ///		[sunsingh] 18feb07 Created
        /// </history>
        public AlertPriorityDialog AlertPriorityDialog
        {
            get
            {
                if (this.cachedAlertPriorityDialog == null)
                {
                    this.cachedAlertPriorityDialog = new AlertPriorityDialog(CoreManager.MomConsole);

                    ////this.cachedAdvancedSearchDialog = new Mom.Test.UI.Core.Console.Search.Dialogs.AdvancedSearchDialog(CoreManager.MomConsole);
                    UISynchronization.WaitForUIObjectReady(this.cachedAlertPriorityDialog, this.timeout);
                    this.cachedAlertPriorityDialog.Extended.SetFocus();
                }

                return this.cachedAlertPriorityDialog;
            }
        }



        #endregion

        #region public methods

        /// ------------------------------------------------------------------
        /// <summary>
        /// Launches Advanced Search window, sets search parameter and clicks 'search'
        /// </summary>
        /// <param name="searchParameters">Advanced Search Parameters</param>
        /// ------------------------------------------------------------------
        public void DoAdvancedSearch(AdvancedSearchParameters searchParameters)
        {
            int retry = 0;
            int maxTries = 5;
            bool searchButtonVisibleAndEnabled = true;

            ////Launch AdvancedSearch window
            Utilities.LogMessage("DoAdvancedSearch");
            this.LaunchAdvancedSearchWindow();
            
            UISynchronization.WaitForProcessReady(this.AdvancedSearchDialogWindow, 90000);
            UISynchronization.WaitForUIObjectReady(this.AdvancedSearchDialogWindow, 90000);
            
            ////Set advanced search parameters
            this.SetAdvancedSearchParameters(searchParameters);

            ////click search button ang Go!!!!!!!!!!!!!!
            Utilities.LogMessage("DoAdvancedSearch :: Clicking search button'" + searchParameters.Name + "'");
            Utilities.TakeScreenshot("BeforeClickingSearch");
            CoreManager.MomConsole.Waiters.WaitForButtonEnabled(this.AdvancedSearchDialogWindow.Controls.SearchButton);
            this.AdvancedSearchDialogWindow.ClickSearch();
            Utilities.TakeScreenshot("AfterClickingSearch");
            this.AdvancedSearchDialogWindow.WaitForResponse();
            Sleeper.Delay(5000);
            this.AdvancedSearchDialogWindow.ScreenElement.WaitForReady();
            searchButtonVisibleAndEnabled = this.AdvancedSearchDialogWindow.Controls.SearchButton.IsVisible &&
                this.AdvancedSearchDialogWindow.Controls.SearchButton.IsEnabled &&
                this.AdvancedSearchDialogWindow.Controls.SearchButton.Extended.IsForeground;

            ////wait for search to complete -- retrylogic
            while (searchButtonVisibleAndEnabled && retry <= maxTries)
            {
                this.AdvancedSearchDialogWindow.WaitForResponse();
                
                this.AdvancedSearchDialogWindow.ScreenElement.WaitForReady();
                ////log the unsuccessful attempt
                Core.Common.Utilities.LogMessage(
                    "DoAdvancedSearch :: Checking whether search is completed ::" + "Attempt " + retry + " of " + maxTries);
                retry++;
                searchButtonVisibleAndEnabled = this.AdvancedSearchDialogWindow.Controls.SearchButton.IsVisible &&
                 this.AdvancedSearchDialogWindow.Controls.SearchButton.IsEnabled &&
                 this.AdvancedSearchDialogWindow.Controls.SearchButton.Extended.IsForeground;
            }
        }

        /// ------------------------------------------------------------------
        /// <summary>
        /// Verifies advanced search results for existence of specific object
        /// </summary>
        /// <param name="advSearchParams">Advanced Search Parameters</param>
        /// <param name="resultColumnName">Column name to look for in search results</param>
        /// <param name="expectedResult">Expected string in the col identified by resultColumnName parameter </param>
        /// <returns>True/False</returns>
        /// ------------------------------------------------------------------
        public bool VerifySearchResults(AdvancedSearchParameters advSearchParams, AdvancedSearchResultColumn resultColumnName, string expectedResult)
        {
            bool searchWindowFound = false;
            int retry = 0;
            int maxTries = 5;

            Core.Common.Utilities.LogMessage("VerifySearchResults :: '" + advSearchParams.Name + "'");
            try
            {
                this.AdvancedSearchDialogWindow.WaitForResponse(this.timeout);
                
                this.AdvancedSearchDialogWindow.ScreenElement.WaitForReady();
                this.AdvancedSearchDialogWindow.Extended.SetFocus();
                searchWindowFound = true;
            }
            catch
            {
                while (!searchWindowFound && (retry <= maxTries))
                {
                    try
                    {
                        this.AdvancedSearchDialogWindow.WaitForResponse(this.timeout);
                        this.AdvancedSearchDialogWindow.Extended.SetFocus();
                        searchWindowFound = true;
                    }
                    catch
                    {
                        ////log the unsuccessful attempt
                        Core.Common.Utilities.LogMessage(
                            "VerifySearchResults :: " + "Attempt " + retry + " of " + maxTries);
                        retry++;
                        Sleeper.Delay(this.timeout);
                    }
                }

                if (!searchWindowFound)
                {
                    ////throw existing Exception
                    Utilities.LogMessage("VerifySearchResults :: Exception :: Unable to find search window :: '" + advSearchParams.Name + "'");
                    throw;
                }
            }

            return this.VerifyObject(advSearchParams, resultColumnName, expectedResult);
        }

        /// ------------------------------------------------------------------
        /// <summary>
        /// Verify Saved Search
        /// </summary>
        /// <param name="savedSearchName">name of the saved search</param>
        /// <returns>true/false</returns>
        /// ------------------------------------------------------------------
        public bool VerifySavedSearch(string savedSearchName)
        {
            bool found = false;
            try
            {
                Utilities.LogMessage("VerifySavedSearch :: Navigating to Saved Searches node");
                this.NavigateToSavedSearchedNode();
                consoleApp.Waiters.WaitForStatusReady();
                Utilities.LogMessage("VerifySavedSearch :: Successfully Navigated to Saved Searches node");
            }
            catch (Maui.Core.WinControls.TreeNode.Exceptions.NodeNotFoundException)
            {
                Utilities.LogMessage("VerifySavedSearch :: Unable to find Saved Searches Node in navpane"); 
                throw;
            }

            try
            {
                ////#79934
                CoreManager.MomConsole.ViewPane.Extended.Click(MouseClickType.SingleClick, MouseFlags.LeftButton);
                consoleApp.Waiters.WaitForStatusReady();
                CoreManager.MomConsole.SendKeys(KeyboardCodes.F5);
                consoleApp.Waiters.WaitForStatusReady();

                ViewPane savedSearchesViewPane = CoreManager.MomConsole.ViewPane;
                Mom.Test.UI.Core.Console.MomControls.GridControl savedSearchesGrid = savedSearchesViewPane.Grid;
                Utilities.LogMessage("VerifySavedSearch :: checking saved searches grid for data '" + savedSearchName + "'");
                DataGridViewRow searchRow = savedSearchesGrid.FindData(savedSearchName, Strings.SavedSearchesNameColumn);

                if (searchRow != null && searchRow.Cells.Count > 0)
                {
                    Utilities.LogMessage("VerifySavedSearch :: Found Saved Search '" + savedSearchName);
                    found = true;
                }
                else
                {
                    Utilities.LogMessage("VerifySavedSearch :: Unable to find Saved Search '" + savedSearchName);
                }
            }
            catch
            {
                throw;
            }

            return found;
        }

        /// ------------------------------------------------------------------
        /// <summary>
        /// Delete Saved Search
        /// </summary>
        /// <param name="savedSearchName">Name of the saved search to delete</param>
        /// ------------------------------------------------------------------
        public void DeleteSearch(string savedSearchName)
        {
            try
            {
                Utilities.LogMessage("DeleteSearch :: Navigating to Saved Searches node");
                this.NavigateToSavedSearchedNode();
                consoleApp.Waiters.WaitForStatusReady();
                Utilities.LogMessage("DeleteSearch :: Successfully Navigated to Saved Searches node");
            }
            catch (Maui.Core.WinControls.TreeNode.Exceptions.NodeNotFoundException)
            {
                Utilities.LogMessage("DeleteSearch :: Unable to find Saved Searches Node in navpane");
                throw;
            }

            try
            {
                ViewPane savedSearchesViewPane = CoreManager.MomConsole.ViewPane;
                Mom.Test.UI.Core.Console.MomControls.GridControl savedSearchesGrid = savedSearchesViewPane.Grid;
                Utilities.LogMessage("DeleteSearch :: checking saved searches grid for data '" + savedSearchName + "'");
                DataGridViewRow searchRow = savedSearchesGrid.FindData(savedSearchName, Strings.SavedSearchesNameColumn);

                if (searchRow != null && searchRow.Cells.Count > 0)
                {
                    Utilities.LogMessage("DeleteSearch :: Found Saved Search '" + savedSearchName);
                    Utilities.LogMessage("DeleteSearch :: Clicking Saved Search Row...");
                    
                    ////Not sure why Click() on a DGVRow takes quite some time to return ???
                    ////searchRow.Click();
                    searchRow.Cells[0].AccessibleObject.Click(MouseClickType.SingleClick, MouseFlags.LeftButton);

                    consoleApp.Waiters.WaitForStatusReady(Constants.OneMinute);

                    Utilities.LogMessage("DeleteSearch :: Clicking delete from context menu...");
                    Maui.Core.WinControls.Menu deleteSearchMenuItem = new Maui.Core.WinControls.Menu(Maui.Core.WinControls.ContextMenuAccessMethod.ShiftF10);
                    //deleteSearchMenuItem.WaitContextMenuWithTimeOut(Constants.DefaultContextMenuTimeout);
                    deleteSearchMenuItem.ScreenElement.WaitForReady();
                    deleteSearchMenuItem.ExecuteMenuItem(Mom.Test.UI.Core.Console.Views.Views.Strings.DeleteContextMenu);

                    consoleApp.Waiters.WaitForStatusReady();
                }
                else
                {
                    Utilities.LogMessage("DeleteSearch :: Unable to find Saved Search '" + savedSearchName);
                }
            }
            catch
            {
                throw;
            }
        }

        /// ------------------------------------------------------------------
        /// <summary>
        /// Verify Saved Search Deletion
        /// </summary>
        /// <param name="savedSearchName">name of the saved search</param>
        /// <returns>true/false</returns>
        /// ------------------------------------------------------------------
        public bool VerifyDeletion(string savedSearchName)
        {
            bool deleted = false;
            try
            {
                Utilities.LogMessage("VerifyDeletion :: Navigating to Saved Searches node");
                this.NavigateToSavedSearchedNode();
                consoleApp.Waiters.WaitForStatusReady();
                Utilities.LogMessage("VerifyDeletion :: Successfully Navigated to Saved Searches node");
            }
            catch (Maui.Core.WinControls.TreeNode.Exceptions.NodeNotFoundException)
            {
                Utilities.LogMessage("VerifyDeletion :: Unable to find Saved Searches Node in navpane");
                throw;
            }

            try
            {
                ViewPane savedSearchesViewPane = CoreManager.MomConsole.ViewPane;
                Mom.Test.UI.Core.Console.MomControls.GridControl savedSearchesGrid = savedSearchesViewPane.Grid;
                Utilities.LogMessage("VerifyDeletion :: checking saved searches grid for data '" + savedSearchName + "'");
                DataGridViewRow searchRow = savedSearchesGrid.FindData(savedSearchName, Strings.SavedSearchesNameColumn);
                if (searchRow == null)
                {
                    Utilities.LogMessage("VerifyDeletion :: Verified Saved Search Deletion'" + savedSearchName);
                    deleted = true;
                }
                else if (searchRow.Cells.Count > 0)
                {
                    Utilities.LogMessage("VerifyDeletion :: Verified Saved Search Deletion'" + savedSearchName);
                    deleted = true;
                }
                else
                {
                    Utilities.LogMessage("VerifyDeletion :: Deleted Saved Search still shows up!!! '" + savedSearchName);
                }
            }
            catch
            {
                throw;
            }

            ViewPane viewPane = CoreManager.MomConsole.ViewPane;
            viewPane.Grid.Click();

            return deleted;
        }

        /// ------------------------------------------------------------------
        /// <summary>
        /// Navigate to Saved Searches node in My Workspace
        /// </summary>
        /// ------------------------------------------------------------------
        public void NavigateToSavedSearchedNode()
        {
            NavigationPane navPane = CoreManager.MomConsole.NavigationPane;
            navPane.ClickWunderBarButton(NavigationPane.WunderBarButton.MyWorkspace);
            
            ////TODO Take this off after Bug # 72576 is resolved
            navPane.SelectNode(NavigationPane.Strings.MyWorkspace, NavigationPane.NavigationTreeView.MyWorkspace);
            consoleApp.Waiters.WaitForStatusReady();
            
            navPane.SelectNode(
              NavigationPane.Strings.MyWorkspace + Constants.PathDelimiter + NavigationPane.Strings.SavedSearchesNode,
              NavigationPane.NavigationTreeView.MyWorkspace);
            consoleApp.Waiters.WaitForStatusReady();
        }

        #endregion

        #region private methods

        /// ------------------------------------------------------------------
        /// <summary>
        /// Launches advanced search window (from Tools->Advanced Search menu)
        /// </summary>
        /// ------------------------------------------------------------------
        private void LaunchAdvancedSearchWindow()
        {
            try
            {
                Utilities.LogMessage("LaunchAdvancedSearchWindow");
                //UISynchronization.WaitForUIObjectReady(this.consoleApp.MainWindow, Constants.DefaultDialogTimeout);
                this.consoleApp.MainWindow.ScreenElement.WaitForReady();
                Utilities.LogMessage("LaunchAdvancedSearchWindow :: Executing command for launching advanced search window");

                int maxTries = 5;
                for (int tries = 0; tries < maxTries; tries++)
                {
                    try
                    {
                        Commands.ToolsAdvancedSearch.Execute(this.consoleApp, CommandMethod.Default);

                        if (this.AdvancedSearchDialogWindow != null)
                        {
                            tries = maxTries;
                        }
                    }
                    catch (Maui.Core.Window.Exceptions.WindowNotFoundException)
                    {
                        Utilities.LogMessage("LaunchAdvancedSearchWindow :: Failed lanch advanced search window, go to retry.");
                    }
                    catch (System.InvalidOperationException)
                    {
                        Utilities.LogMessage("LaunchAdvancedSearchWindow :: Failed lanch advanced search window, go to retry.");
                    }
                }

                Utilities.LogMessage("LaunchAdvancedSearchWindow :: Successfully launched advanced search command");
                this.AdvancedSearchDialogWindow.WaitForResponse();//refrenced advanceserchwindow
                this.AdvancedSearchDialogWindow.Extended.State = WindowState.Maximize;
                this.AdvancedSearchDialogWindow.WaitForResponse();
            }
            catch
            {
                Utilities.LogMessage("LaunchAdvancedSearchWindow :: Exception");
                throw;
            }
        }

        /// ------------------------------------------------------------------
        /// <summary>
        /// Sets search parameters in advanced search window
        /// </summary>
        /// <param name="parameters">Advanced search parameters</param>
        /// ------------------------------------------------------------------
        private void SetAdvancedSearchParameters(AdvancedSearchParameters parameters)
        {
            try
            {
                Utilities.LogMessage("SetAdvancedSearchParameters :: '" + parameters.Name + "'");
                this.searchObjectType = parameters.SearchObjectType;
                //added by sun
               
                //end sun

                this.AdvancedSearchDialogWindow.Extended.SetFocus();
                this.AdvancedSearchDialogWindow.WaitForResponse();
                
                this.AdvancedSearchDialogWindow.ScreenElement.WaitForReady();

                string objectTypeComboBoxTextToSelect = null;//point to appriopiate resourcestring depending
                string checkListBoxItemToCheck = null;
                
                ////StaticControl nameLinkToClick = null;
                switch (this.searchObjectType)
                {
                    case AdvancedSearchObjectType.ManagedObjects:
                        objectTypeComboBoxTextToSelect = AdvancedSearch.Strings.ManagedObjects;
                        checkListBoxItemToCheck = AdvancedSearch.Strings.WithASpecificNameManagedObjects;
                        
                        ////nameLinkToClick = this.AdvancedSearchDialogWindow.Controls.WithASpecificNameStaticControlManagedObjects;
                        break;
                    case AdvancedSearchObjectType.Alerts:
                        objectTypeComboBoxTextToSelect = AdvancedSearch.Strings.Alerts;
                        checkListBoxItemToCheck = AdvancedSearch.Strings.WithASpecificNameAlerts;
                        
                        ////nameLinkToClick = this.AdvancedSearchDialogWindow.Controls.WithASpecificNameStaticControlAlerts;
                        break;
                    case AdvancedSearchObjectType.Events:
                        objectTypeComboBoxTextToSelect = AdvancedSearch.Strings.Events;
                        checkListBoxItemToCheck = AdvancedSearch.Strings.LoggedByASpecificComputerEvents;
                        break;
                    case AdvancedSearchObjectType.Rules:
                        objectTypeComboBoxTextToSelect = AdvancedSearch.Strings.Rules;
                        checkListBoxItemToCheck = AdvancedSearch.Strings.WithASpecificNameRules;
                        break;
                    case AdvancedSearchObjectType.Views:
                        objectTypeComboBoxTextToSelect = AdvancedSearch.Strings.Views;
                        checkListBoxItemToCheck = AdvancedSearch.Strings.WithASpecificNameViews;
                        break;
                    case AdvancedSearchObjectType.Tasks:
                        objectTypeComboBoxTextToSelect = AdvancedSearch.Strings.Tasks;
                        checkListBoxItemToCheck = AdvancedSearch.Strings.WithASpecificNameTasks;
                        break;
                    case AdvancedSearchObjectType.ObjectDiscoveries:
                        objectTypeComboBoxTextToSelect = AdvancedSearch.Strings.ObjectDiscoveries;
                        checkListBoxItemToCheck = AdvancedSearch.Strings.WithASpecificNameObjectDiscoveries;
                        break;
                    case AdvancedSearchObjectType.Monitors:
                        if (parameters.Name.ToLowerInvariant() == SearchType.AlertPriority.ToString().ToLowerInvariant())
                        {
                            objectTypeComboBoxTextToSelect = AdvancedSearch.Strings.Monitors;
                            checkListBoxItemToCheck = AdvancedSearch.Strings.WithASpecificMonitorAlertPriority;
                        }                       
                        else
                        {
                        objectTypeComboBoxTextToSelect = AdvancedSearch.Strings.Monitors;
                        checkListBoxItemToCheck = AdvancedSearch.Strings.WithASpecificNameMonitors;
                        }
                        break;
                }

                ////this.AdvancedSearchDialogWindow.ObjectTypeComboBoxText = AdvancedSearch.Strings.ManagedObjects;
                Utilities.LogMessage("SetAdvancedSearchParameters :: setting object type as " + objectTypeComboBoxTextToSelect);
                this.AdvancedSearchDialogWindow.Controls.ObjectTypeComboBox.SelectByText(objectTypeComboBoxTextToSelect);
                this.AdvancedSearchDialogWindow.WaitForResponse();
                
                this.AdvancedSearchDialogWindow.ScreenElement.WaitForReady();
                ////independent of index
                Utilities.LogMessage("SetAdvancedSearchParameters :: clicking checkbox for search by name :: " + parameters.Name);
                
                ////this.AdvancedSearchDialogWindow.Controls.SearchForSpecificObjectTypesListBox.Items[0].Click();
                
                ////this.AdvancedSearchDialogWindow.Controls.SearchForSpecificObjectTypesListBox.SelectItem(checkListBoxItemToCheck);
                this.AdvancedSearchDialogWindow.Controls.CreateInListBox.SelectItem(checkListBoxItemToCheck);
                
                ////this.AdvancedSearchDialogWindow.Controls.CreateInListBox.Items[0].Click();
                this.AdvancedSearchDialogWindow.WaitForResponse();
                
                this.AdvancedSearchDialogWindow.ScreenElement.WaitForReady();
                
                Utilities.LogMessage("SetAdvancedSearchParameters :: clicking the link for typing in the name :: " + parameters.Name);

                ////nameLinkToClick.Click(MouseClickType.SingleClick, MouseFlags.LeftButton);
                ////this.AdvancedSearchDialogWindow.Controls.WithASpecificNameStaticControlManagedObjects.Click(MouseClickType.SingleClick, MouseFlags.LeftButton);
                switch (parameters.SearchObjectType)
                {
                    case AdvancedSearchObjectType.ManagedObjects:
                        ////this.AdvancedSearchDialogWindow.Controls.WithASpecificNameStaticControlManagedObjects.Click(MouseClickType.SingleClick, MouseFlags.LeftButton);
                        this.AdvancedSearchDialogWindow.Controls.WithASpecificNameStaticControl.Extended.SetFocus();
                        Sleeper.Delay(Constants.OneSecond);
                        CoreManager.MomConsole.SendKeys(KeyboardCodes.Enter);
                        //this.AdvancedSearchDialogWindow.Controls.WithASpecificNameStaticControl.Click(MouseClickType.SingleClick, MouseFlags.LeftButton);
                        break;
                    case AdvancedSearchObjectType.Alerts:
                        this.AdvancedSearchDialogWindow.Controls.WithASpecificNameStaticControlAlerts.Extended.SetFocus();
                        Sleeper.Delay(Constants.OneSecond);
                        CoreManager.MomConsole.SendKeys(KeyboardCodes.Enter);
                        //this.AdvancedSearchDialogWindow.Controls.WithASpecificNameStaticControlAlerts.Click(MouseClickType.SingleClick, MouseFlags.LeftButton);
                        break;
                    case AdvancedSearchObjectType.Events:
                        //#89682 EN MOM on DE OS - Click doesn't do anything for this ctrl!!
                        this.AdvancedSearchDialogWindow.Controls.LoggedByASpecificComputerStaticControlEvents.Extended.SetFocus();
                        Sleeper.Delay(Constants.OneSecond);
                        CoreManager.MomConsole.SendKeys(KeyboardCodes.Enter);
                        //this.AdvancedSearchDialogWindow.Controls.LoggedByASpecificComputerStaticControlEvents.Click(MouseClickType.SingleClick, MouseFlags.LeftButton);
                        break;
                    case AdvancedSearchObjectType.Rules:
                        this.AdvancedSearchDialogWindow.Controls.WithASpecificNameStaticControlRules.Extended.SetFocus();
                        Sleeper.Delay(Constants.OneSecond);
                        CoreManager.MomConsole.SendKeys(KeyboardCodes.Enter);
                        //this.AdvancedSearchDialogWindow.Controls.WithASpecificNameStaticControlRules.Click(MouseClickType.SingleClick, MouseFlags.LeftButton);
                        break;
                    case AdvancedSearchObjectType.Views:
                        this.AdvancedSearchDialogWindow.Controls.WithASpecificNameStaticControlViews.Extended.SetFocus();
                        Sleeper.Delay(Constants.OneSecond);
                        CoreManager.MomConsole.SendKeys(KeyboardCodes.Enter);
                        //this.AdvancedSearchDialogWindow.Controls.WithASpecificNameStaticControlViews.Click(MouseClickType.SingleClick, MouseFlags.LeftButton);
                        break;
                    case AdvancedSearchObjectType.Tasks:
                        this.AdvancedSearchDialogWindow.Controls.WithASpecificNameStaticControlTasks.Extended.SetFocus();
                        Sleeper.Delay(Constants.OneSecond);
                        CoreManager.MomConsole.SendKeys(KeyboardCodes.Enter);
                        //this.AdvancedSearchDialogWindow.Controls.WithASpecificNameStaticControlTasks.Click(MouseClickType.SingleClick, MouseFlags.LeftButton);
                        break;
                    case AdvancedSearchObjectType.ObjectDiscoveries:
                        this.AdvancedSearchDialogWindow.Controls.WithASpecificNameStaticControl.Extended.SetFocus();
                        Sleeper.Delay(Constants.OneSecond);
                        CoreManager.MomConsole.SendKeys(KeyboardCodes.Enter);
                        //this.AdvancedSearchDialogWindow.Controls.WithASpecificNameStaticControl.Click(MouseClickType.SingleClick, MouseFlags.LeftButton);
                        break;
                    case AdvancedSearchObjectType.Monitors:
                        if (parameters.Name.ToLowerInvariant() == SearchType.AlertPriority.ToString().ToLowerInvariant())
                        {
                            this.AdvancedSearchDialogWindow.Controls.AndTheMonitorGeneratesAlertsOfSpecificPriorityStaticControl.Extended.SetFocus();
                            Sleeper.Delay(Constants.OneSecond);
                            CoreManager.MomConsole.SendKeys(KeyboardCodes.Enter);
                        }
                        else
                        {
                            //Utilities.LogMessage("SetAdvancedSearchParameters :: clicking the link for typing in the name :: " + parameters.Name);
                            this.AdvancedSearchDialogWindow.Controls.WithASpecificNameStaticControl.Extended.SetFocus();
                            Sleeper.Delay(Constants.OneSecond);
                            CoreManager.MomConsole.SendKeys(KeyboardCodes.Enter);
                            //this.AdvancedSearchDialogWindow.Controls.WithASpecificNameStaticControl.Click(MouseClickType.SingleClick, MouseFlags.LeftButton);
                        } 
                       break;
                }
                //if monitor open the alert priority window write switch statement

                bool needRetry = true;
                int tries = 0;
                int maxTries = 10;
                while (tries < maxTries && needRetry)
                {
                    tries++;
                    try
                    {
                        this.AdvancedSearchWildcardDialogWindow.WaitForResponse();
                        // this.AdvancedSearchWildcardDialogWindow.Extended.SetFocus();
                        
                        this.AdvancedSearchDialogWindow.ScreenElement.WaitForReady();
                        needRetry = false;
                    }
                    catch (Maui.Core.Window.Exceptions.UnknownActiveWinException ex)
                    {
                        Utilities.LogMessage("Error handling: " + ex.Message);
                        Utilities.LogMessage("SetAdvancedSearchParameters:: Attempt " +
                            tries + " of " + maxTries);
                        CoreManager.MomConsole.SendKeys(KeyboardCodes.Esc);
                        this.cachedAdvancedSearchWildcardDialog = null;
                        Sleeper.Delay(Constants.OneSecond);
                        CoreManager.MomConsole.SendKeys(KeyboardCodes.Enter);
                    }
                }

                if (needRetry)
                {
                    CoreManager.MomConsole.SendKeys(KeyboardCodes.Esc);
                    throw new Maui.Core.Window.Exceptions.UnknownActiveWinException(
                        "cannot set focus on Advanced Search Wildcard Dialog Window");
                }

                if (parameters.Name.ToLowerInvariant() == SearchType.AlertPriority.ToString().ToLowerInvariant())
                {

                    Utilities.LogMessage("SetAdvancedSearchParameters :: clicking the Type Of MonitorAlertPriority");
                    //this.AlertPriorityDialog.Controls.ListBox0.Items[1].Click();
                    //this.AdvancedSearchDialogWindow.Controls.CreateInListBox.SelectItem(checkListBoxItemToCheck);
                    this.AlertPriorityDialog.Controls.ListBox0.SelectItem(AdvancedSearch.Strings.WithMediumAlertPriority);
                    this.AlertPriorityDialog.WaitForResponse();
                    
                    this.AdvancedSearchDialogWindow.ScreenElement.WaitForReady();

                    Utilities.LogMessage("SetAdvancedSearchParameters :: Pressing OK button after selecting the alertPriority Type");
                    this.AlertPriorityDialog.ClickOK();
                    CoreManager.MomConsole.WaitForDialogClose(this.AlertPriorityDialog, 30);
                    Utilities.LogMessage("SetAdvancedSearchParameters :: Successfully closed AlertPriorityDialogWindow");
                }
                else
                {
                    Utilities.LogMessage("SetAdvancedSearchParameters :: typing name to search for :: " + parameters.Name);
                    
                    // work around a weird timing issue. Retry. 
                    needRetry = true;
                    tries = 0;
                    maxTries = 10;
                    while (tries < maxTries && needRetry)
                    {
                        tries++;
                        try
                        {
                            this.cachedAdvancedSearchWildcardDialog = null;
                            this.AdvancedSearchWildcardDialogWindow.SpecifyTheTextStringToSearchForSQLStyleWildcards_AreAcceptedText = parameters.Name;
                            needRetry = false;
                        }
                        catch (Maui.Core.Window.Exceptions.WindowNotFoundException)
                        {
                            Utilities.LogMessage("SetAdvancedSearchParameters:: Attempt to enter text" +
                                tries + " of " + maxTries);
                            CoreManager.MomConsole.SendKeys(KeyboardCodes.Esc);
                            this.cachedAdvancedSearchWildcardDialog = null;
                            Sleeper.Delay(Constants.OneSecond);
                            CoreManager.MomConsole.SendKeys(KeyboardCodes.Enter);
                        }
                    }

                    if (needRetry)
                    {
                        CoreManager.MomConsole.SendKeys(KeyboardCodes.Esc);
                        throw new Maui.Core.Window.Exceptions.WindowNotFoundException(
                            "cannot enter parameters name in the text box");
                    }

                    this.AdvancedSearchWildcardDialogWindow.WaitForResponse();
                    
                    this.AdvancedSearchDialogWindow.ScreenElement.WaitForReady();

                    Utilities.LogMessage("SetAdvancedSearchParameters :: Pressing OK button after typing name :: " + parameters.Name);
                    this.AdvancedSearchWildcardDialogWindow.ClickOK();
                    CoreManager.MomConsole.WaitForDialogClose(this.AdvancedSearchWildcardDialogWindow, 30);
                    Utilities.LogMessage("SetAdvancedSearchParameters :: Successfully closed advancedsearchdialogWindow");
                }
                this.AdvancedSearchDialogWindow.WaitForResponse();
                
                this.AdvancedSearchDialogWindow.ScreenElement.WaitForReady();

                ////Save search 
                if (true == parameters.Save && (parameters.SaveSearchName != null && parameters.SaveSearchName.Length > 0))
                {
                    Utilities.LogMessage("SetAdvancedSearchParameters :: Clicking save to my favorites...");
                    this.AdvancedSearchDialogWindow.ClickSaveToFavorites();
                    this.SavedSearchNameDialogWindow.WaitForResponse();//calling saved searchnamedialogwindow
                    
                    this.AdvancedSearchDialogWindow.ScreenElement.WaitForReady();
                    
                    Utilities.LogMessage("SetAdvancedSearchParameters :: saving search to favorites with name:'" + parameters.SaveSearchName + "'");
                    this.SavedSearchNameDialogWindow.FolderNameText = parameters.SaveSearchName;
                    this.SavedSearchNameDialogWindow.WaitForResponse();
                    
                    this.AdvancedSearchDialogWindow.ScreenElement.WaitForReady();

                    Utilities.LogMessage("SetAdvancedSearchParameters :: clicking OK button for save");
                    this.SavedSearchNameDialogWindow.ClickOK();
                    CoreManager.MomConsole.WaitForDialogClose(this.SavedSearchNameDialogWindow, 45);//waiting for dialog to close
                    this.AdvancedSearchDialogWindow.WaitForResponse();
                    
                    this.AdvancedSearchDialogWindow.ScreenElement.WaitForReady();
                    Utilities.LogMessage("SetAdvancedSearchParameters :: Successfully saved search to favorites with name:'" + parameters.SaveSearchName + "'");
                }
            }
            catch
            {
                Utilities.LogMessage("SetAdvancedSearchParameters :: Exception ");
                throw;
            }
        }

        /// ------------------------------------------------------------------
        /// <summary>
        /// Verifies existence of a specific object in search results
        /// </summary>
        /// <param name="advSearchParams">Advanced Search parameters</param>
        /// <param name="resultColumnName">Column name to look for in search results</param>
        /// <param name="expectedResult">Expected string in the col identified by resultColumnName parameter </param>
        /// <returns>True/False</returns>
        /// ------------------------------------------------------------------
        private bool VerifyObject(AdvancedSearchParameters advSearchParams, AdvancedSearchResultColumn resultColumnName, string expectedResult)
        {
            string colName = null;
            string colData = expectedResult;
            int retry = 0;
            int maxTries = 20;
            bool found = false;
            DataGridViewRow resultTop = null;
            GridControl searchResultsGrid = null;

            Core.Common.Utilities.LogMessage("VerifyObject :: '" + advSearchParams.Name + "'");

            switch (resultColumnName)
            {
                case AdvancedSearchResultColumn.ManagedObjectsNameColumn:
                    colName = AdvancedSearch.Strings.ManagedObjectNameColumn;
                    break;
                case AdvancedSearchResultColumn.AlertsPathColumn:
                    colName = AdvancedSearch.Strings.AlertPathColumn;
                    
                    ////colData = Utilities.MomServerName;
                    break;
                case AdvancedSearchResultColumn.EventsEventNumberColumn:
                    colName = AdvancedSearch.Strings.EventNumberColumn;
                    
                    ////colData = "7036";
                    break;
                case AdvancedSearchResultColumn.RulesNameColumn:
                    colName = AdvancedSearch.Strings.RuleNameColumn;
                    break;
                case AdvancedSearchResultColumn.ViewsNameColumn:
                    colName = AdvancedSearch.Strings.ViewNameColumn;
                    break;
                case AdvancedSearchResultColumn.TasksNameColumn:
                    colName = AdvancedSearch.Strings.TaskNameColumn;
                    break;
                case AdvancedSearchResultColumn.ObjectDiscoveriesNameColumn:
                    colName = AdvancedSearch.Strings.ObjectDiscoveryNameColumn;
                    break;
                case AdvancedSearchResultColumn.MonitorsNameColumn:
                    colName = AdvancedSearch.Strings.MonitorNameColumn;
                    break;
                default:
                    break;
            }

            ////temp fix for events
            ////if (advSearchParams.SearchObjectType == AdvancedSearchObjectType.Events || expectedResult.Trim() == "%")
            if (expectedResult.Trim() == "%")
            {
                searchResultsGrid = new GridControl(this.AdvancedSearchDialogWindow, GridControl.ControlIDs.ViewPaneGrid);
                found = searchResultsGrid.Rows.Count > 1; //1 since it includes header row!!
                this.AdvancedSearchDialogWindow.WaitForResponse();
                    
                this.AdvancedSearchDialogWindow.ScreenElement.WaitForReady();
                while ( (!found) && (retry <= maxTries))
                {
                    searchResultsGrid = new GridControl(this.AdvancedSearchDialogWindow, GridControl.ControlIDs.ViewPaneGrid);
                    found = searchResultsGrid.Rows.Count > 0;
                    this.AdvancedSearchDialogWindow.WaitForResponse();
        
                    this.AdvancedSearchDialogWindow.ScreenElement.WaitForReady();
                    Core.Common.Utilities.LogMessage(
                            "VerifyObject Wildcard :: Attempt " + retry + " of " + maxTries);
                    retry++;
                    Sleeper.Delay(Constants.OneSecond);
                }

                if (searchResultsGrid == null)
                {
                    Utilities.LogMessage("VerifyObject Wildcard :: Unable to find search results grid '" + advSearchParams.Name + "'");
                }
                else if (!found)
                {
                    Utilities.LogMessage("VerifyObject Wildcard :: Unable to find anything in search results grid ");
                }
                else
                {
                    Utilities.LogMessage("VerifyObject Wildcard :: Found atleast one row in search results grid");
                }
            } 
            else
            {
                searchResultsGrid = new GridControl(this.AdvancedSearchDialogWindow, GridControl.ControlIDs.ViewPaneGrid);
                resultTop = searchResultsGrid.FindData(expectedResult, colName, GridControl.SearchStringMatchType.ContainsMatch);
                this.AdvancedSearchDialogWindow.WaitForResponse();
                    
                this.AdvancedSearchDialogWindow.ScreenElement.WaitForReady();
                while ((searchResultsGrid == null || resultTop == null) && (retry <= maxTries))
                {
                    searchResultsGrid = new GridControl(this.AdvancedSearchDialogWindow, GridControl.ControlIDs.ViewPaneGrid);
                    resultTop = searchResultsGrid.FindData(expectedResult, colName, GridControl.SearchStringMatchType.ContainsMatch);
                    this.AdvancedSearchDialogWindow.WaitForResponse();
                            
                    this.AdvancedSearchDialogWindow.ScreenElement.WaitForReady();

                    //// log the unsuccessful attempt
                    Core.Common.Utilities.LogMessage(
                        "VerifyObject :: Attempt " + retry + " of " + maxTries);
                    retry++;
                    Sleeper.Delay(Constants.OneSecond);
                }                

                if (searchResultsGrid == null)
                {
                    Utilities.LogMessage("VerifyObject :: Unable to find search results grid '" + advSearchParams.Name + "'");
                }
                else if (resultTop == null)
                {
                    Utilities.LogMessage("VerifyObject :: Unable to find '" + expectedResult + "' in search results grid column '" + colName + "'");
                }
                else if (!(resultTop.Cells.Count > 0))
                {
                    Utilities.LogMessage("VerifyObject :: Unable to find '" + expectedResult + "' in search results grid column '" + colName + "'");
                }
                else
                {
                    Utilities.LogMessage("VerifyObject :: Found '" + expectedResult + "' in search results grid column '" + colName + "'");
                    found = true;
                }
            }

            return found;
        }
        #endregion

        #region strings
        /// <summary>
        /// Strings
        /// </summary>
        public class Strings
        {
            #region Constants

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for Confirm Saved Search Deletion dialogue
            /// 
            /// a-joelj 19AUG08 Added resource string for new dialogue
            /// </summary>
            /// -----------------------------------------------------------------------------
            private const string ResourceConfirmSavedSearchDeletion = ";Confirm Saved Search Deletion;ManagedString;Microsoft.MOM.UI.Components.dll;Microsoft.EnterpriseManagement.Mom.Internal.UI.Console.WunderBarPages.Favorites.FavoritesResources;SavedSearchDeletionConfirmationTitle";
            
            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for Managed Objects
            /// </summary>
            /// -----------------------------------------------------------------------------
            private const string ResourceManagedObjects = ";Managed Objects;ManagedString;Microsoft.EnterpriseManagement.UI.Console.Common.dll;Microsoft.EnterpriseManagement.Mom.Internal.UI.Console.SharedResources;SearchManagedObject";
            ////";Managed Objects;ManagedString;Microsoft.MOM.UI.Components.dll;Microsoft.EnterpriseManagement.Mom.Internal.UI.Search.SearchResource;SearchManagedObjects";

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for Alerts
            /// </summary>
            /// -----------------------------------------------------------------------------
            private const string ResourceAlerts = ";Alerts;ManagedString;Microsoft.EnterpriseManagement.UI.Console.Common.dll;Microsoft.EnterpriseManagement.Mom.Internal.UI.Console.SharedResources;SearchAlert";

            ////";Alerts;ManagedString;Microsoft.MOM.UI.Components.dll;Microsoft.EnterpriseManagement.Mom.Internal.UI.Search.SearchResource;AlertAdvancedSearch";

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for Events
            /// </summary>
            /// -----------------------------------------------------------------------------
            private const string ResourceEvents = ";Events;ManagedString;Microsoft.EnterpriseManagement.UI.Console.Common.dll;Microsoft.EnterpriseManagement.Mom.Internal.UI.Console.SharedResources;SearchEvent";
            ////";Events;ManagedString;Microsoft.MOM.UI.Components.dll;Microsoft.EnterpriseManagement.Mom.Internal.UI.Search.SearchResource;EventAdvancedSearch";

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for Monitors
            /// </summary>
            /// -----------------------------------------------------------------------------
            private const string ResourceMonitors = ";Monitors;ManagedString;Microsoft.EnterpriseManagement.UI.Console.Common.dll;Microsoft.EnterpriseManagement.Mom.Internal.UI.Console.SharedResources;SearchMonitor";
            ////";Monitors;ManagedString;Microsoft.MOM.UI.Components.dll;Microsoft.EnterpriseManagement.Mom.Internal.UI.Search.SearchResource;SearchMonitors";

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for Rules
            /// </summary>
            /// -----------------------------------------------------------------------------
            private const string ResourceRules = ";Rules;ManagedString;Microsoft.EnterpriseManagement.UI.Console.Common.dll;Microsoft.EnterpriseManagement.Mom.Internal.UI.Console.SharedResources;SearchRule";
            ////";Rules;ManagedString;Microsoft.MOM.UI.Console.exe;Microsoft.EnterpriseManagement.Mom.Internal.UI.Console.SharedResources;SearchRule";
            ////";Rules;ManagedString;Microsoft.MOM.UI.Components.dll;Microsoft.EnterpriseManagement.Mom.Internal.UI.Search.SearchResource;SearchRules";

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for Tasks
            /// </summary>
            /// -----------------------------------------------------------------------------
            private const string ResourceTasks = ";Tasks;ManagedString;Microsoft.EnterpriseManagement.UI.Console.Common.dll;Microsoft.EnterpriseManagement.Mom.Internal.UI.Console.SharedResources;SearchTask";
            ////";Tasks;ManagedString;Microsoft.MOM.UI.Console.exe;Microsoft.EnterpriseManagement.Mom.Internal.UI.Console.SharedResources;SearchTask";
            ////";Tasks;ManagedString;Microsoft.MOM.UI.Components.dll;Microsoft.EnterpriseManagement.Mom.Internal.UI.Search.SearchResource;SearchTasks";

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for Views
            /// </summary>
            /// -----------------------------------------------------------------------------
            private const string ResourceViews = ";Views;ManagedString;Microsoft.EnterpriseManagement.UI.Console.Common.dll;Microsoft.EnterpriseManagement.Mom.Internal.UI.Console.SharedResources;SearchView";
            ////";Views;ManagedString;Microsoft.MOM.UI.Console.exe;Microsoft.EnterpriseManagement.Mom.Internal.UI.Console.SharedResources;SearchView";
            ////";Views;ManagedString;Microsoft.MOM.UI.Components.dll;Microsoft.EnterpriseManagement.Mom.Internal.UI.Search.SearchResource;SearchViews";

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for Object Discoveries
            /// </summary>
            /// -----------------------------------------------------------------------------
            private const string ResourceObjectDiscoveries = ";Object Discoveries;ManagedString;Microsoft.EnterpriseManagement.UI.Console.Common.dll;Microsoft.EnterpriseManagement.Mom.Internal.UI.Console.SharedResources;SearchDiscovery";
            ////";Object Discoveries;ManagedString;Microsoft.MOM.UI.Console.exe;Microsoft.EnterpriseManagement.Mom.Internal.UI.Console.SharedResources;SearchDiscovery";

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for Managed Object Name Column
            /// </summary>
            /// -----------------------------------------------------------------------------
            private const string ResourceManagedObjectNameColumn = ";Name;ManagedString;Microsoft.MOM.UI.Components.dll;Microsoft.EnterpriseManagement.Mom.Internal.UI.Views.ManagedObjectView.ManagedObjectViewResource;NameColumn";

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for AlertPathColumn
            /// </summary>
            /// -----------------------------------------------------------------------------
            private const string ResourceAlertPathColumn = ";Path;ManagedString;Microsoft.MOM.UI.Components.dll;Microsoft.EnterpriseManagement.Mom.Internal.UI.Views.AlertResources;Path";

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for AlertSourceColumn
            /// </summary>
            /// -----------------------------------------------------------------------------
            private const string ResourceAlertSourceColumn = ";Source;ManagedString;Microsoft.MOM.UI.Components.dll;Microsoft.EnterpriseManagement.Mom.Internal.UI.Views.AlertResources;Source";

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for EventNumberColumn
            /// </summary>
            /// -----------------------------------------------------------------------------
            private const string ResourceEventNumberColumn = ";Event Number;ManagedString;Microsoft.MOM.UI.Components.dll;Microsoft.EnterpriseManagement.Mom.Internal.UI.Views.EventResources;ColumnEventNumber";

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for RuleNameColumn
            /// </summary>
            /// -----------------------------------------------------------------------------
            private const string ResourceRuleNameColumn = ";Name;ManagedString;Microsoft.EnterpriseManagement.UI.Authoring.dll;Microsoft.EnterpriseManagement.Internal.UI.Authoring.Views.RulesView.RulesViewResources;NameColumn";
                //";Name;ManagedString;Microsoft.MOM.UI.Components.dll;Microsoft.EnterpriseManagement.Mom.Internal.UI.Views.RulesView;NameColumn";

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for ViewNameColumn
            /// </summary>
            /// -----------------------------------------------------------------------------
            private const string ResourceViewNameColumn = ";Name;ManagedString;Microsoft.EnterpriseManagement.UI.Authoring.dll;Microsoft.EnterpriseManagement.Internal.UI.Authoring.Views.ViewDefinitionsView.ViewDefinitionsViewResources;NameColumn";
                //";Name;ManagedString;Microsoft.MOM.UI.Components.dll;Microsoft.EnterpriseManagement.Mom.Internal.UI.Monitoring.Views.ViewDefinitionsView.ViewDefinitionsViewResources;NameColumn";

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for TaskNameColumn
            /// </summary>
            /// -----------------------------------------------------------------------------
            private const string ResourceTaskNameColumn = ";Name;ManagedString;Microsoft.EnterpriseManagement.UI.Authoring.dll;Microsoft.EnterpriseManagement.Internal.UI.Authoring.Views.TasksView.TasksViewResources;NameColumn";
                //";Name;ManagedString;Microsoft.MOM.UI.Components.resources.dll;Microsoft.EnterpriseManagement.Mom.Internal.UI.Views.TasksView.en;NameColumn";

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for ObjectDiscoveriesNameColumn
            /// </summary>
            /// -----------------------------------------------------------------------------
            private const string ResourceObjectDiscoveriesNameColumn = ";Name;ManagedString;Microsoft.EnterpriseManagement.UI.Authoring.dll;Microsoft.EnterpriseManagement.Internal.UI.Authoring.Views.DiscoveriesView.DiscoveriesViewResources;NameColumn";


            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for MonitorNameColumn
            /// </summary>
            /// -----------------------------------------------------------------------------
             private const string ResourceMonitorNameColumn = ";Target;ManagedString;Microsoft.EnterpriseManagement.UI.Authoring.dll;Microsoft.EnterpriseManagement.Internal.UI.Authoring.Views.HealthView.HealthViewResources;NameColumn";
            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for Saved Searches Name Column.
            /// </summary>
            /// -----------------------------------------------------------------------------
            private const string ResourceSavedSearchesNameColumn = ";Name;ManagedString;Microsoft.MOM.UI.Components.dll;Microsoft.EnterpriseManagement.Mom.Internal.UI.Console.WunderBarPages.Favorites.FavoritesResources;SavedSearchNameColumn";

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for:  specific
            /// </summary>
            /// -----------------------------------------------------------------------------
            private const string ResourceSpecific = ";specific;ManagedString;Microsoft.MOM.UI.Common.dll;Microsoft.EnterpriseManagement.Mom.Internal.UI.Controls.CriteriaControl.CriteriaControlResource;SpecificLink";

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for:  WithASpecificNameManagedObjects
            /// </summary>
            /// -----------------------------------------------------------------------------
            private const string ResourceWithASpecificNameManagedObjects = ";{0} with a {1} name;ManagedString;Microsoft.MOM.UI.Components.dll;Microsoft.EnterpriseManagement.Mom.Internal.UI.Views.ManagedObjectView.ManagedObjectViewResource;NameCriteriaText";

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for:  WithASpecificNameAlerts
            /// </summary>
            /// -----------------------------------------------------------------------------
            private const string ResourceWithASpecificNameAlerts = ";{0} with a {1} name;ManagedString;Microsoft.MOM.UI.Components.dll;Microsoft.EnterpriseManagement.Mom.Internal.UI.Views.AlertViewCriteriaResource;NameText";

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for:  LoggedByASpecificComputerEvents
            /// </summary>
            /// -----------------------------------------------------------------------------
            private const string ResourceLoggedByASpecificComputerEvents = ";{0} logged by a {1} computer;ManagedString;Microsoft.MOM.UI.Components.dll;Microsoft.EnterpriseManagement.Mom.Internal.UI.Views.EventViewCriteriaResource;AgentText";

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for:  WithASpecificNameRules
            /// </summary>
            /// -----------------------------------------------------------------------------
            private const string ResourceWithASpecificNameRules = ";{0} with a {1} name;ManagedString;Microsoft.MOM.UI.Components.dll;Microsoft.EnterpriseManagement.Mom.Internal.UI.Views.RuleViewCriteriaResources;DisplayNameText";

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for:  WithASpecificNameViews
            /// </summary>
            /// -----------------------------------------------------------------------------
            private const string ResourceWithASpecificNameViews = ";{0} with a {1} name;ManagedString;Microsoft.MOM.UI.Components.dll;Microsoft.EnterpriseManagement.Mom.Internal.UI.Views.ViewsViewCriteriaResources;DisplayNameText";

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for:  WithASpecificNameTasks
            /// </summary>
            /// -----------------------------------------------------------------------------
            private const string ResourceWithASpecificNameTasks = ";{0} with a {1} name;ManagedString;Microsoft.MOM.UI.Components.dll;Microsoft.EnterpriseManagement.Mom.Internal.UI.Views.TaskViewCriteriaResources;DisplayNameText";

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for:  WithASpecificNameObjectDiscoveries
            /// </summary>
            /// -----------------------------------------------------------------------------
            private const string ResourceWithASpecificNameObjectDiscoveries = ";{0} with a {1} name;ManagedString;Microsoft.MOM.UI.Components.dll;Microsoft.EnterpriseManagement.Mom.Internal.UI.Views.DiscoveriesViewCriteriaResources;DisplayNameText";


            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for:  WithASpecificNamemonitors
            /// </summary>
            /// -----------------------------------------------------------------------------
            private const string ResourceWithASpecificNameMonitors = ";{0} with a {1} name;ManagedString;Microsoft.MOM.UI.Components.dll;Microsoft.EnterpriseManagement.Mom.Internal.UI.Views.MonitorViewResources;DisplayNameText";

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for:  WithASpecificMonitorAlertPriority
            /// </summary>
            /// -----------------------------------------------------------------------------
            private const string ResourceWithASpecificMonitorAlertPriority = ";{0} the monitor generates alerts of {1} priority;ManagedString;Microsoft.MOM.UI.Components.dll;Microsoft.EnterpriseManagement.Mom.Internal.UI.Views.MonitorViewResources;AlertPriorityText";
            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for:  ResourceWithMediumAlertPriority
            /// </summary>
            /// -----------------------------------------------------------------------------
            private const string ResourceWithMediumAlertPriority = ";Medium;ManagedString;Microsoft.MOM.UI.Common.dll;Microsoft.EnterpriseManagement.Mom.Internal.UI.Controls.CriteriaControl.CriteriaControlResource;AlertPriorityMedium";

            
            /// <summary>
            /// WindowsServiceTemplateMonitorGUID
            /// </summary>            
            private static Guid ResourceWindowsServiceTemplateMonitorGuid = Mom.Test.UI.Core.Common.IdUtil.GetMPObjectIdAsGuid(ManagementPackConstants.SystemCenterNTServiceLibraryMPName, ManagementPackConstants.MomManagementPackPublicKeyToken, ManagementPackConstants.NTServiceStateMonitorName);

            #endregion

            #region Private Members
            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for Managed Objects
            /// 
            /// a-joelj 19AUG08 Added resource string for new dialogue
            /// </summary>
            /// -----------------------------------------------------------------------------
            private static string cachedConfirmSavedSearchDeletion;
            
            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for Managed Objects
            /// </summary>
            /// -----------------------------------------------------------------------------
            private static string cachedManagedObjects;

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for Alerts
            /// </summary>
            /// -----------------------------------------------------------------------------
            private static string cachedAlerts;

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for Events
            /// </summary>
            /// -----------------------------------------------------------------------------
            private static string cachedEvents;

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for Monitors
            /// </summary>
            /// -----------------------------------------------------------------------------
            private static string cachedMonitors;

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for Rules
            /// </summary>
            /// -----------------------------------------------------------------------------
            private static string cachedRules;

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for Tasks
            /// </summary>
            /// -----------------------------------------------------------------------------
            private static string cachedTasks;

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for Views
            /// </summary>
            /// -----------------------------------------------------------------------------
            private static string cachedViews;

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for Object Discoveries
            /// </summary>
            /// -----------------------------------------------------------------------------
            private static string cachedObjectDiscoveries;

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for Managed Object Name Column
            /// </summary>
            /// -----------------------------------------------------------------------------
            private static string cachedManagedObjectNameColumn;

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for Alert Path Column
            /// </summary>
            /// -----------------------------------------------------------------------------
            private static string cachedAlertPathColumn;

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for Alert Source Column
            /// </summary>
            /// -----------------------------------------------------------------------------
            private static string cachedAlertSourceColumn;

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for Event Number Column
            /// </summary>
            /// -----------------------------------------------------------------------------
            private static string cachedEventNumberColumn;

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for Rule Name Column
            /// </summary>
            /// -----------------------------------------------------------------------------
            private static string cachedRuleNameColumn;

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for Rule Name Column
            /// </summary>
            /// -----------------------------------------------------------------------------
            private static string cachedViewNameColumn;

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for Task Name Column
            /// </summary>
            /// -----------------------------------------------------------------------------
            private static string cachedTaskNameColumn;

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for Object Discoveries Name Column
            /// </summary>
            /// -----------------------------------------------------------------------------
            private static string cachedObjectDiscoveriesNameColumn;

            /// -----------------------------------------------------------------------------
            /// /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for Monitor Name Column
            /// </summary>
            /// -----------------------------------------------------------------------------
            private static string cachedMonitorNameColumn;

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for Saved Searches Name Column
            /// </summary>
            /// -----------------------------------------------------------------------------
            private static string cachedSavedSearchesNameColumn;

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for specific
            /// </summary>
            /// -----------------------------------------------------------------------------
            private static string cachedSpecific;

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for WithASpecificNameManagedObjects
            /// </summary>
            /// -----------------------------------------------------------------------------
            private static string cachedWithASpecificNameManagedObjects;

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for cachedWithASpecificMonitorAlertPriority 
            /// </summary>
            /// -----------------------------------------------------------------------------
            private static string cachedWithASpecificMonitorAlertPriority;  

         /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for WithASpecificNameAlerts
            /// </summary>
            /// -----------------------------------------------------------------------------
            private static string cachedWithASpecificNameAlerts;

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for LoggedByASpecificComputerEvents
            /// </summary>
            /// -----------------------------------------------------------------------------
            private static string cachedLoggedByASpecificComputerEvents;

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for WithASpecificNameRules
            /// </summary>
            /// -----------------------------------------------------------------------------
            private static string cachedWithASpecificNameRules;

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for WithASpecificNameViews
            /// </summary>
            /// -----------------------------------------------------------------------------
            private static string cachedWithASpecificNameViews;

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for WithASpecificNameTasks
            /// </summary>
            /// -----------------------------------------------------------------------------
            private static string cachedWithASpecificNameTasks;

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for WithASpecificNameObjectDiscoveries
            /// </summary>
            /// -----------------------------------------------------------------------------
            private static string cachedWithASpecificNameObjectDiscoveries;


            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for WithASpecificNameObjectDiscoveries
            /// </summary>
            /// -----------------------------------------------------------------------------
            private static string cachedWithASpecificNameMonitors;

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// Contains resource string for WithASpecificNameObjectDiscoveries
            /// </summary>
            /// -----------------------------------------------------------------------------
            private static string cachedWithMediumAlertPriority;

            /// -----------------------------------------------------------------------------
            /// <summary>
            /// WindowsServiceTemplateMonitorAlertName
            /// </summary>   
            /// -----------------------------------------------------------------------------
            private static string cachedWindowsServiceTemplateMonitorAlertName;


            #endregion

            #region properties

            /// <summary>
            /// Confirm Saved Search Deletion
            /// </summary>
            public static string ConfirmSavedSearchDeletion
            {
                get
                {
                    if ((cachedConfirmSavedSearchDeletion == null))
                    {
                        cachedConfirmSavedSearchDeletion = CoreManager.MomConsole.GetIntlStr(ResourceConfirmSavedSearchDeletion);
                    }

                    return cachedConfirmSavedSearchDeletion;
                }
            }
            

            /// <summary>
            /// Managed Objects
            /// </summary>
            public static string ManagedObjects
            {
                get
                {
                    if ((cachedManagedObjects == null))
                    {
                        cachedManagedObjects = CoreManager.MomConsole.GetIntlStr(ResourceManagedObjects);
                    }

                    return cachedManagedObjects;
                }
            }

            /// <summary>
            /// Alerts
            /// </summary>
            public static string Alerts
            {
                get
                {
                    if ((cachedAlerts == null))
                    {
                        cachedAlerts = CoreManager.MomConsole.GetIntlStr(ResourceAlerts);
                    }

                    return cachedAlerts;
                }
            }

            /// <summary>
            /// Events
            /// </summary>
            public static string Events
            {
                get
                {
                    if ((cachedEvents == null))
                    {
                        cachedEvents = CoreManager.MomConsole.GetIntlStr(ResourceEvents);
                    }

                    return cachedEvents;
                }
            }

            /// <summary>
            /// Monitors
            /// </summary>
            public static string Monitors
            {
                get
                {
                    if ((cachedMonitors == null))
                    {
                        cachedMonitors = CoreManager.MomConsole.GetIntlStr(ResourceMonitors);
                    }

                    return cachedMonitors;
                }
            }

            /// <summary>
            /// Rules
            /// </summary>
            public static string Rules
            {
                get
                {
                    if ((cachedRules == null))
                    {
                        cachedRules = CoreManager.MomConsole.GetIntlStr(ResourceRules);
                    }

                    return cachedRules;
                }
            }

            /// <summary>
            /// Tasks
            /// </summary>
            public static string Tasks
            {
                get
                {
                    if ((cachedTasks == null))
                    {
                        cachedTasks = CoreManager.MomConsole.GetIntlStr(ResourceTasks);
                    }

                    return cachedTasks;
                }
            }

            /// <summary>
            /// Views
            /// </summary>
            public static string Views
            {
                get
                {
                    if ((cachedViews == null))
                    {
                        cachedViews = CoreManager.MomConsole.GetIntlStr(ResourceViews);
                    }

                    return cachedViews;
                }
            }

            /// <summary>
            /// Object Discoveries
            /// </summary>
            public static string ObjectDiscoveries
            {
                get
                {
                    if ((cachedObjectDiscoveries == null))
                    {
                        cachedObjectDiscoveries = CoreManager.MomConsole.GetIntlStr(ResourceObjectDiscoveries);
                    }

                    return cachedObjectDiscoveries;
                }
            }

            /// <summary>
            /// Managed Object Name Column
            /// </summary>
            public static string ManagedObjectNameColumn
            {
                get
                {
                    if ((cachedManagedObjectNameColumn == null))
                    {
                        cachedManagedObjectNameColumn = CoreManager.MomConsole.GetIntlStr(ResourceManagedObjectNameColumn);
                    }

                    return cachedManagedObjectNameColumn;
                }
            }

            /// <summary>
            /// Alert Path Column
            /// </summary>
            public static string AlertPathColumn
            {
                get
                {
                    if ((cachedAlertPathColumn == null))
                    {
                        cachedAlertPathColumn = CoreManager.MomConsole.GetIntlStr(ResourceAlertPathColumn);
                    }

                    return cachedAlertPathColumn;
                }
            }

            /// <summary>
            /// Alert Source Column
            /// </summary>
            public static string AlertSourceColumn
            {
                get
                {
                    if ((cachedAlertSourceColumn == null))
                    {
                        cachedAlertSourceColumn = CoreManager.MomConsole.GetIntlStr(ResourceAlertSourceColumn);
                    }

                    return cachedAlertSourceColumn;
                }
            }

            /// <summary>
            /// Event Number Column
            /// </summary>
            public static string EventNumberColumn
            {
                get
                {
                    if ((cachedEventNumberColumn == null))
                    {
                        cachedEventNumberColumn = CoreManager.MomConsole.GetIntlStr(ResourceEventNumberColumn);
                    }

                    return cachedEventNumberColumn;
                }
            }

            /// <summary>
            /// Rule Name Column
            /// </summary>
            public static string RuleNameColumn
            {
                get
                {
                    if ((cachedRuleNameColumn == null))
                    {
                        cachedRuleNameColumn = CoreManager.MomConsole.GetIntlStr(ResourceRuleNameColumn);
                    }

                    return cachedRuleNameColumn;
                }
            }

            /// <summary>
            /// View Name Column
            /// </summary>
            public static string ViewNameColumn
            {
                get
                {
                    if ((cachedViewNameColumn == null))
                    {
                        cachedViewNameColumn = CoreManager.MomConsole.GetIntlStr(ResourceViewNameColumn);
                    }

                    return cachedViewNameColumn;
                }
            }

            /// <summary>
            /// Task Name Column
            /// </summary>
            public static string TaskNameColumn
            {
                get
                {
                    if ((cachedTaskNameColumn == null))
                    {
                        cachedTaskNameColumn = CoreManager.MomConsole.GetIntlStr(ResourceTaskNameColumn);
                    }

                    return cachedTaskNameColumn;
                }
            }

            /// <summary>
            /// Object Discovery Name Column
            /// </summary>
            public static string ObjectDiscoveryNameColumn
            {
                get
                {
                    if ((cachedObjectDiscoveriesNameColumn == null))
                    {
                        cachedObjectDiscoveriesNameColumn = CoreManager.MomConsole.GetIntlStr(ResourceObjectDiscoveriesNameColumn);
                    }

                    return cachedObjectDiscoveriesNameColumn;
                }
            }


            /// <summary>
            /// Object MonitorNameColumn
            /// </summary>
            public static string MonitorNameColumn
            {
                get
                {
                    if ((cachedMonitorNameColumn == null))
                    {
                        cachedMonitorNameColumn = CoreManager.MomConsole.GetIntlStr(ResourceMonitorNameColumn);
                    }

                    return cachedMonitorNameColumn;
                }
            }


            /// <summary>
            /// Saved Searches Name Column
            /// </summary>
            public static string SavedSearchesNameColumn
            {
                get
                {
                    if ((cachedSavedSearchesNameColumn == null))
                    {
                        cachedSavedSearchesNameColumn = CoreManager.MomConsole.GetIntlStr(ResourceSavedSearchesNameColumn);
                    }

                    return cachedSavedSearchesNameColumn;
                }
            }

            /// <summary>
            /// Specific
            /// </summary>
            public static string Specific
            {
                get
                {
                    if ((cachedSpecific == null))
                    {
                        cachedSpecific = CoreManager.MomConsole.GetIntlStr(ResourceSpecific);
                    }

                    return cachedSpecific;
                }
            }

            /// <summary>
            /// WithASpecificNameManagedObjects
            /// </summary>
            public static string WithASpecificNameManagedObjects
            {
                get
                {
                    if ((cachedWithASpecificNameManagedObjects == null))
                    {
                        cachedWithASpecificNameManagedObjects = CoreManager.MomConsole.GetIntlStr(ResourceWithASpecificNameManagedObjects).Replace("{0}", "").Replace("{1}", Strings.Specific).TrimStart();
                    }

                    return cachedWithASpecificNameManagedObjects;
                }
            }

             /// <summary>
            /// WithASpecificNameAlerts
            /// </summary>
            public static string WithASpecificNameAlerts
            {
                get
                {
                    if ((cachedWithASpecificNameAlerts == null))
                    {
                        cachedWithASpecificNameAlerts = CoreManager.MomConsole.GetIntlStr(ResourceWithASpecificNameAlerts).Replace("{0}", "").Replace("{1}", Strings.Specific).TrimStart();
                    }

                    return cachedWithASpecificNameAlerts;
                }
            }

            /// <summary>
            /// FromASpecificSourceEvents
            /// </summary>
            public static string LoggedByASpecificComputerEvents
            {
                get
                {
                    if ((cachedLoggedByASpecificComputerEvents == null))
                    {
                        cachedLoggedByASpecificComputerEvents = CoreManager.MomConsole.GetIntlStr(ResourceLoggedByASpecificComputerEvents).Replace("{0}", "").Replace("{1}", Strings.Specific).TrimStart();
                    }

                    return cachedLoggedByASpecificComputerEvents;
                }
            }

            /// <summary>
            /// WithASpecificNameRules
            /// </summary>
            public static string WithASpecificNameRules
            {
                get
                {
                    if ((cachedWithASpecificNameRules == null))
                    {
                        cachedWithASpecificNameRules = CoreManager.MomConsole.GetIntlStr(ResourceWithASpecificNameRules).Replace("{0}", "").Replace("{1}", Strings.Specific).TrimStart();
                    }

                    return cachedWithASpecificNameRules;
                }
            }

            /// <summary>
            /// WithASpecificNameViews
            /// </summary>
            public static string WithASpecificNameViews
            {
                get
                {
                    if ((cachedWithASpecificNameViews == null))
                    {
                        cachedWithASpecificNameViews = CoreManager.MomConsole.GetIntlStr(ResourceWithASpecificNameViews).Replace("{0}", "").Replace("{1}", Strings.Specific).TrimStart();
                    }

                    return cachedWithASpecificNameViews;
                }
            }

            /// <summary>
            /// WithASpecificNameTasks
            /// </summary>
            public static string WithASpecificNameTasks
            {
                get
                {
                    if ((cachedWithASpecificNameTasks == null))
                    {
                        cachedWithASpecificNameTasks = CoreManager.MomConsole.GetIntlStr(ResourceWithASpecificNameTasks).Replace("{0}", "").Replace("{1}", Strings.Specific).TrimStart();
                    }

                    return cachedWithASpecificNameTasks;
                }
            }

            /// <summary>
            /// WithASpecificNameObjectDiscoveries
            /// </summary>
            public static string WithASpecificNameObjectDiscoveries
            {
                get
                {
                    if ((cachedWithASpecificNameObjectDiscoveries == null))
                    {
                        cachedWithASpecificNameObjectDiscoveries = CoreManager.MomConsole.GetIntlStr(ResourceWithASpecificNameObjectDiscoveries).Replace("{0}", "").Replace("{1}", Strings.Specific).TrimStart();
                    }

                    return cachedWithASpecificNameObjectDiscoveries;
                }
            }

            /// <summary>
            /// WithASpecificNameObjectDiscoveries
            /// </summary>
            public static string WithASpecificNameMonitors
            {
                get
                {
                    if ((cachedWithASpecificNameMonitors == null))
                    {
                        cachedWithASpecificNameMonitors = CoreManager.MomConsole.GetIntlStr(ResourceWithASpecificNameMonitors).Replace("{0}", "").Replace("{1}", Strings.Specific).TrimStart();
                    }

                    return cachedWithASpecificNameMonitors;
                }
            }



            /// <summary>
            /// WithASpecificMonitorAlertPriority
            /// </summary>
            public static string WithASpecificMonitorAlertPriority
            {
                get
                {
                    if ((cachedWithASpecificMonitorAlertPriority == null))
                    {
                        cachedWithASpecificMonitorAlertPriority = CoreManager.MomConsole.GetIntlStr(ResourceWithASpecificMonitorAlertPriority).Replace("{0}", "").Replace("{1}", Strings.Specific).TrimStart();
                    }

                    return cachedWithASpecificMonitorAlertPriority;
                }
            }


            /// <summary>
            /// WithASpecificMonitorAlertPriority
            /// </summary>
            public static string WithMediumAlertPriority
            {
                get
                {
                    if ((cachedWithMediumAlertPriority == null))
                    {
                        cachedWithMediumAlertPriority = CoreManager.MomConsole.GetIntlStr(ResourceWithMediumAlertPriority);
                    }

                    return cachedWithMediumAlertPriority;
                }
            }

            
            /// <summary>
            /// WindowsServiceTemplateMonitorAlertName
            /// </summary>
            public static string WindowsServiceTemplateAlertName
            {
                get
                {
                    if ((cachedWindowsServiceTemplateMonitorAlertName == null))
                    {
                        cachedWindowsServiceTemplateMonitorAlertName = Core.Common.Utilities.GetMonitorAlertName(ResourceWindowsServiceTemplateMonitorGuid);
                    }

                    return cachedWindowsServiceTemplateMonitorAlertName;
                }
            }          
            #endregion
        }
        #endregion
    }
}
