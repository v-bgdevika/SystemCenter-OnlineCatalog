environment:
  host:
    os: 'windows'
    flavor: 'server'
    version: '2019'
  runtime:
    provider: 'appcontainer'
    image: 'cdpxwin1809.azurecr.io/global/vse2017:latest'
    source_mode: 'map'

signing_options:
  profile: 'azure'

restore:
  commands:
    - !!defaultcommand
      name: 'Azure DevOps Extension Restore'
      command: 'src/WindowsServerSample/AzureDevOpsExtension/restore.cmd'
      fail_on_stderr: false
    - !!defaultcommand
      name: 'Restore CSharp'
      command: 'src\WindowsServerSample\VisualStudio\restore.cmd'
    - !!defaultcommand
      name: 'Install Java'
      command: 'src\WindowsServerSample\Java\restore.cmd'
    - !!defaultcommand
      name: 'Install Maven'
      command: 'src\WindowsServerSample\Maven\restore.cmd'
    - !!defaultcommand
      name: 'Get Maven Dependencies'
      command: 'src\WindowsServerSample\Maven\get-maven-deps.cmd'
    - !!defaultcommand
      name: 'Install Perl'
      command: 'src\WindowsServerSample\Perl\restore.cmd'
    - !!defaultcommand
      name: 'Install Ruby'
      command: 'src\WindowsServerSample\Ruby\restore.cmd'

build:
  commands:
    - !!buildcommand
      name: 'Build Azure DevOps Extension'
      fail_on_stderr: false
      command: 'src/WindowsServerSample/AzureDevOpsExtension/build.cmd'
      artifacts:
        - from: 'src/WindowsServerSample/AzureDevOpsExtension'
          to: 'Linux/AzureDevOpsExtension'
          include:
            - '**/*.vsix'
    - !!buildcommand
      name: 'Build CSharp'
      command: 'src\WindowsServerSample\VisualStudio\build.cmd'
      fail_on_stderr: false
      artifacts:
        - from: 'src\WindowsServerSample\VisualStudio\Various\ClassLibrary\bin\Debug'
          to: 'Dotnet_ClassLibrary'
          include:
            - '**/*'
          signing_options:
            sign_inline: true
        - from: 'src\WindowsServerSample\VisualStudio\Various\ClassLibrary.Test\bin\Debug'
          to: 'ClassLibrary.Test'
          include:
            - '**/*'
    - !!buildcommand
      name: 'Build CSharp MSBuild'
      command: 'src\WindowsServerSample\DotNetMSBuild\build-vs2017.cmd'
      fail_on_stderr: false
      artifacts:
        - from: 'src\WindowsServerSample\DotNetMSBuild\MSBuildSample\bin'
          to: 'Dotnet_HelloWorld'
          include:
            - '**/*'
          signing_options:
            sign_inline: true
    - !!buildcommand
      name: 'Build Go'
      fail_on_stderr: false
      command: 'src\WindowsServerSample\Go\build.cmd'
      artifacts:
        - from: 'src\WindowsServerSample\Go\build.cmd'
          to: 'Go'
          include:
            - 'HelloWorld.exe'
    - !!buildcommand
      name: 'Build Java'
      fail_on_stderr: false
      command: 'src\WindowsServerSample\Java\build.cmd'
      artifacts:
        - from: 'src\WindowsServerSample\Java'
          to: 'Plain JDK'
          include:
            - 'HelloWorld.class'
    - !!buildcommand
      name: 'Build Maven'
      command: 'src\WindowsServerSample\Maven\build.cmd'
      fail_on_stderr: false
      artifacts:
        - from: 'src\WindowsServerSample\Maven\target'
          to: 'Maven'
          include:
            - 'helloworld*.jar'
          signing_options:
            sign_inline: true
    - !!buildcommand
      name: 'Build Perl'
      fail_on_stderr: false
      command: 'src\WindowsServerSample\Perl\build.cmd'
      artifacts:
        - from: 'src\WindowsServerSample\Perl'
          to: 'Perl'
          include:
            - 'HelloWorld.pl'
    - !!buildcommand
      name: 'Build Python3'
      fail_on_stderr: false
      command: 'src\WindowsServerSample\Python3\build.cmd'
      artifacts:
        - from: 'src\WindowsServerSample\Python3'
          to: 'Python3'
          include:
            - 'HelloWorld.py'
          signing_options:
            profile: 'none'
    - !!buildcommand
      name: 'Build Ruby'
      fail_on_stderr: false
      command: 'src\WindowsServerSample\Ruby\build.cmd'
      artifacts:
        - from: 'src\WindowsServerSample\Ruby'
          to: 'Ruby'
          include:
            - 'HelloWorld.rb'

test:
  commands:
    - !!testcommand
      name: 'Test CSharp'
      command: 'src\WindowsServerSample\VisualStudio\test.cmd'
      fail_on_stderr: false
      logs:
        - to: 'test-csharp-logs'
          include:
            - '**/*.trx'
            - '**/*.coverage'
      testresults:
        - from: 'src\WindowsServerSample\VisualStudio'
          title: 'Even-Odd-Tests'
          type: 'nunit'
          include:
            - '**/*.trx'
            - '**/*.coverage'

static_analysis_options:
  policheck_options:
    scan_comments: true
    files_to_scan:
      - exclude:
        - 'src\WindowsServerSample\VisualStudio2015\AspNet45AppInsights\Scripts\modernizr-2.6.2.js'
        - 'src\WindowsServerSample\VisualStudio2015\AspNet46\Scripts\modernizr-2.6.2.js'
        - 'src\WindowsServerSample\VisualStudio2015\DjangoWebProject\app\static\app\scripts\modernizr-2.6.2.js'
        - 'src\WindowsServerSample\VisualStudio2015\CordovaApp\Project_Readme.html'
        - 'src\WindowsServerSample\VisualStudio2015\TypescriptCordovaApp\Project_Readme.html'
        - 'src\**\node_modules\**.js'
        - 'src\**\node_modules\**.txt'
        - 'src\**\node_modules\**.md'
  binskim_options:
    files_to_scan:
      - from: 'src'
        exclude:
        - '**/node_modules/**/*.exe'
        - '**/node_modules/**/*.js'
        - '**/Go/*.exe'
  moderncop_options:
    files_to_scan:
      - from: 'src'
        exclude:
        - '**/Node/**/*.js'  # Ignore all because ModernCop does not support ES6+ JavaScript, which is what this application is written with. We are supposed to use TSLint instead. https://www.1eswiki.com/wiki/Secure_Development_Tools_Extension_For_Azure_DevOps
        - '**/AzureDevOpsExtension/**/*.js'  # Ignore all because ModernCop does not support ES6+ JavaScript, which is what this application is written with. We are supposed to use TSLint instead. https://www.1eswiki.com/wiki/Secure_Development_Tools_Extension_For_Azure_DevOps
        - '**/node_modules/**/*.exe'
        - '**/node_modules/**/*.js'

        
package:
  commands:
    - !!dockerbuildcommand                                 # REQUIRED: This maps the command data to a concrete type in the CDPX orchestrator.
      name: 'Build Docker Sample'                            # REQUIRED: All commands have a name field. All console output captured when 
                                                          #           this command runs is tagged with the value of this field.
      context_folder: 'src/DockerBuildExample/Windows'                    # REQUIRED: The repository root relative path of the folder containing the Dockerfile to build. 
                                                          # In effect, the context folder will be repository_checkout_folder/src/DockerFinal.
      dockerfile_name: 'Dockerfile'                    # OPTIONAL: The name of the dockerfile. Docker client does allow the Dockerfile 
                                                          # to be named differently. Defaults to Dockerfile.
                                                          # In effect, the -f option value passed to docker build will be repository_checkout_folder/src/DockerFinal/Foo.dockerfile.
      repository_name: 'cdpx-user-samples'                       # REQUIRED: The name of the image repository. Final repository name will be registry/artifact/service-tree-id/cdpx/sample.
      tag: '1.0.0alpha'                                    # OPTIONAL: Defaults to latest. The tag for the built image. Final tag will be 1.0.0alpha, 1.0.0-timestamp-commitID.
      latest: false                                   # OPTIONAL: Defaults to false. If tag is not set to latest and this flag is set, then tag as latest as well and push latest as well.
      publish: false                                  # OPTIONAL: Defaults to true. If set to false, image will not be pushed. Useful to speed up pull requests.
      export: false                                   # DEPRECATED. Please use export_to_artifact_path instead.
      env_var_suffix: 'MYIMAGE'                            # If defined, environment variables will be emitted for each tag that is published. 
                                                          # NOTE: AT PRESENT, THERE IS NO WAY TO USE THESE VARIABLES.
                                                          # CDP_ARTIFACT_CONTAINER_IMAGE_LATEST_MYIMAGE - Will be set if latest or publish is set to true.
                                                          # CDP_ARTIFACT_CONTAINER_IMAGE_UNIQUE_MYIMAGE - Will be set if publish_unique_tag or publish is set to true.
                                                          # CDP_ARTIFACT_CONTAINER_IMAGE_BUILD_MYIMAGE - Will be set if publish_build_tag or publish is set to true.
                                                          # CDP_ARTIFACT_CONTAINER_IMAGE_FIXED_MYIMAGE - Will be set if publish_fixed_tag or publish is set to true.
      squash: false                                   # If set, the --squash argument is passed to docker build. Not recommended for use on Windows systems.
      publish_build_tag: false                        # If set, the image in the registry is tagged with the build number.
      publish_unique_tag: false                       # If set, the image in the registry is tagged with the unique tag generated by CDPx.
      publish_fixed_tag: true                        # If set, the image in the registry is tagged with the fixed tag.
      metadata_file: 
        local_path: 'context_folder\image-meta.json'       # If defined, the repository root relative path to the file into which JSON metadata about the created image is emitted.
        artifact_path: 'test\docker-image-meta.json'      # If defined, the drop outputs relative path to the file into which JSON metadata about the created image is emitted.
      export_to_artifact_path: 'images\pockers.tar.zip'    # If defined, the drop outputs relative path to the file into which the generated image is exported.
                                                          # NOTE: On Windows, the path must end with .tar.zip. 7-Zip is used to compress the TAR export from Docker.
                                                          # NOTE: On Linux, the path must end with .tar.gz. GZip is used to compress the TAR export from Docker.
        