#################################################################################
#                           Onebranch Retail Pipeline                           #
# This pipeline was created by EasyStart from a sample located at:              #
#   https://aka.ms/obpipelines/easystart/samples                                #
# Documentation:  https://aka.ms/obpipelines                                    #
# Yaml Schema:    https://aka.ms/obpipelines/yaml/schema                        #
# Retail Tasks:   https://aka.ms/obpipelines/tasks                              #
# Support:        https://aka.ms/onebranchsup                                   #
#################################################################################

trigger: none # https://aka.ms/obpipelines/triggers

# name: $(major).$(minor).$(patch).$(build)
name: $(MAJOR).$(MINOR).$(BUILD).$(REVISION)

parameters: # parameters are shown up in ADO UI in a build queue time
- name: 'debug'
  displayName: 'Enable debug output'
  type: boolean
  default: false

variables:
  CDP_DEFINITION_BUILD_COUNT: $[counter('', 0)] # needed for onebranch.pipeline.version task https://aka.ms/obpipelines/versioning
  system.debug: ${{ parameters.debug }}
  ENABLE_PRS_DELAYSIGN: 1
  ROOT: $(Build.SourcesDirectory)
  REPOROOT: $(Build.SourcesDirectory)
  OUTPUTROOT: $(REPOROOT)\out
  NUGET_XMLDOC_MODE: none
  MAJOR: 1
  MINOR: 0
  BUILD: $[counter(variables['MINOR'], 0)]
  REVISION: 0
 # ob_reddog_enabled: true
  CodeQL.Enabled: true
  WindowsContainerImage: 'cdpxwin1809.azurecr.io/global/vse2019:latest' # Docker image which is used to build the project https://aka.ms/obpipelines/containers

resources:
  repositories: 
    - repository: templates
      type: git
      name: OneBranch.Pipelines/GovernedTemplates
      ref: refs/heads/main

extends:
  template: v2/OneBranch.Official.CrossPlat.yml@templates # https://aka.ms/obpipelines/templates
  parameters:
    cloudvault: # https://aka.ms/obpipelines/cloudvault
      enabled: true
   # reddog: # https://aka.ms/obpipelines/reddog
     # enabled: true
    globalSdl: # https://aka.ms/obpipelines/sdl
       tsa:
         enabled: true # onebranch publish all sdl results to TSA. If TSA is disabled all SDL tools will forced into 'break' build mode.
       credscan:
         suppressionsFile: $(Build.SourcesDirectory)\.config\CredScanSuppressions.json
       binskim:
         break: true # always break the build on binskim issues in addition to TSA upload
       policheck:
         break: true
       roslyn:
         break: true # Roslyn issues. You can disable it by setting to 'false'
       codeql:
        compiled: 
          ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
            enabled: true
          ${{ else }}:
            enabled: false
        tsaEnabled: true

    stages:
    - stage: build
      jobs:
      - job: main
        pool:
          type: windows  # read more about custom job pool types at https://aka.ms/obpipelines/yaml/jobs
        
        variables:
           ob_outputDirectory: '$(Build.SourcesDirectory)\out' # this directory is uploaded to pipeline artifacts, reddog and cloudvault. More info at https://aka.ms/obpipelines/artifacts
           ob_sdl_codeSignValidation_excludes:  -|**\Debug\**;
           ob_sdl_binskim_scanOutputDirectoryOnly: true # https://aka.ms/obpipelines/sdl
           ob_symbolsPublishing: true # https://aka.ms/obpipelines/symbols
           ob_sdl_roslyn_break: true
         

        steps:
        
          - task: PowerShell@2
            inputs:
              filePath: '$(Build.SourcesDirectory)\.config\dllversioning.ps1'
              arguments: $(Build.BuildNumber)
            
          - task: MSBuild@1
            displayName: 'Build Product Debug'
            inputs:
              solution: '$(Build.SourcesDirectory)\SystemCenterOnlineCatalogBuild.sln'
              msbuildLocationMethod: 'location'
              msbuildLocation: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe'
              platform: 'x64'
              configuration: 'Debug'
              msbuildArguments: '/t:Restore,build'
              clean: true
              maximumCpuCount: true
              logProjectEvents: true
              createLogFile: true
              
          - task: MSBuild@1
            displayName: 'Build Product Release'
            inputs:
              solution: '$(Build.SourcesDirectory)\SystemCenterOnlineCatalogBuild.sln'
              msbuildLocationMethod: 'location'
              msbuildLocation: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe'
              platform: 'x64'
              configuration: 'Release'
              msbuildArguments: '/t:Restore,build'
              clean: true
              maximumCpuCount: true
              logProjectEvents: true

          - task: UseDotNet@2
            displayName: 'Install .NET Framework 8.0.x'
            inputs:
              packageType: 'sdk'
              version: '8.0.x'
              installationPath: $(Agent.ToolsDirectory)/dotnet

          - task: PowerShell@2
            displayName: 'Create BuildPackage folder'
            inputs:
              targetType: 'inline'
              script: |
               New-Item -ItemType Directory -Force -Path '$(Build.SourcesDirectory)\out\BuildPackage'

          - task: PowerShell@2
            displayName: 'Create PreCompiledBuildPackage folder'
            inputs:
              targetType: 'inline'
              script: |
               New-Item -ItemType Directory -Force -Path '$(Build.SourcesDirectory)\out\PreCompiledBuildPackage'

          - task: PowerShell@2
            displayName: 'Create bin folder'
            inputs:
              targetType: 'inline'
              script: |
               New-Item -ItemType Directory -Force -Path '$(Build.SourcesDirectory)\out\BuildPackage\bin'

          - task: PowerShell@2
            displayName: 'Create web.config file'
            inputs:
              targetType: 'inline'
              script: |
               New-Item -ItemType File -Force -Path '$(Build.SourcesDirectory)\out\BuildPackage\web.config'

          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(Build.SourcesDirectory)\src\product\webservice\bin\Release'
              Contents: '**/*.dll'
              TargetFolder: '$(Build.SourcesDirectory)\out\BuildPackage\bin'

          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(Build.SourcesDirectory)\src\product\webservice'
              Contents: 'ManagementPackCatalogWebService.asmx'
              TargetFolder: '$(Build.SourcesDirectory)\out\BuildPackage'
          - task: CmdLine@2
            displayName: 'Run aspnet_compiler'
            inputs:
              script: 'C:\Windows\Microsoft.NET\Framework\v4.0.30319\aspnet_compiler -p "$(Build.SourcesDirectory)\out\BuildPackage" -v / "$(Build.SourcesDirectory)\out\PreCompiledBuildPackage"'
          - task: CmdLine@2
            displayName: 'Build SQL Tables'
            inputs:
              workingDirectory: '$(Build.SourcesDirectory)\src\product\database'
              script: 'cmd.exe /c createTableSql.bat $(OUTPUTROOT)'  

          - task: CmdLine@2
            displayName: 'Build SQL Procedures'
            inputs:
              workingDirectory: '$(Build.SourcesDirectory)\src\product\database'
              script: 'cmd.exe /c createStoredProcedureSql.bat $(OUTPUTROOT)'

          - task: CmdLine@2
            displayName: 'Build SQL AdminSPs'
            inputs:
              workingDirectory: '$(Build.SourcesDirectory)\src\product\database'
              script: 'cmd.exe /c createAdminStoredProcedureSql.bat $(OUTPUTROOT)' 

          # - task: MSBuild@1
          #   displayName: 'Build Testcode'
          #   continueOnError: true
          #   inputs:
          #     solution: '$(Build.SourcesDirectory)\src\Testcode\SystemCenterOnlineTestCode.sln'
          #     msbuildLocationMethod: 'location'
          #     msbuildLocation: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe'
          #     platform: 'Any CPU'
          #     configuration: 'Debug'
          #     msbuildArguments: '/t:Restore,build'
          #     clean: true
          #     maximumCpuCount: true
          #     logProjectEvents: true

              
          # - task: CopyFiles@2
          #   inputs:
          #    SourceFolder: '$(Build.SourcesDirectory)\src\TestCode'
          #    Contents: '**\bin\**'
          #    TargetFolder: '$(Build.SourcesDirectory)\out\'

          - task: onebranch.pipeline.signing@1
            inputs:
              command: 'sign'
              signing_environment: "azure-ado"
              signing_profile: 'internal_azure_service'
              files_to_sign: '**/*.exe;**/*.dll;**/*.ps1;**/*.asmx;**/*.config'
              search_root: '$(Build.SourcesDirectory)\out'
              
          - task: Semmle@1
            displayName: 'codeql'
            inputs:
             sourceCodeDirectory: '$(Build.SourcesDirectory)'
             language: 'csharp'
             querySuite: 'Recommended'
             timeout: '1800'
             ram: '16384'
             addProjectDirToScanningExclusionList: true
             
          - task: securedevelopmentteam.vss-secure-development-tools.build-task-roslynanalyzers.RoslynAnalyzers@3
            displayName: 'Run Roslyn Analyzers'
            inputs:
              copyLogsOnly: true
         
